
#+TITLE: dogemacs
#+AUTHOR: Jeldo Arno Meppen
#+latex_header: \hypersetup{hidelinks}
Time-stamp: <2020-12-13 22:33:51 jeldo>

* insert coin
This is my init.el in literate style in an org-file.
Started from [[https://sanemacs.com][Sanemacs]] and build up from there.
Learned a lot from all over the place.

[[./screenshot.png]]

** use-package
And ensure that packages are always downloaded/required
#+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   (eval-when-compile
     (require 'use-package))
   (setq use-package-always-ensure t)
 #+END_SRC
 
** useful defaults
#+BEGIN_SRC emacs-lisp
  ;;; MIGRATE THIS TO RELEVANT POSITIONS
  (setq-default cursor-type 'bar)           ; Line-style cursor similar to other text editors
  (setq inhibit-startup-screen t)           ; Disable startup screen
  (setq initial-scratch-message "")         ; Make *scratch* buffer blank
  (setq-default frame-title-format '("%b")) ; Make window title the buffer name
  (setq ring-bell-function 'ignore)         ; Disable bell sound
  (fset 'yes-or-no-p 'y-or-n-p)             ; y-or-n-p makes answering questions faster
  (show-paren-mode 1)                       ; Show closing parens by default
  (setq linum-format "%4d ")                ; Prettify line number format
  (add-hook 'prog-mode-hook                 ; Show line numbers in programming modes
            (if (fboundp 'display-line-numbers-mode)
                #'display-line-numbers-mode
              #'linum-mode))
  (use-package undo-tree                    ; Enable undo-tree, sane undo/redo behavior
    :init (global-undo-tree-mode))
(add-hook 'before-save-hook 'time-stamp)
 #+END_SRC

*** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
*** Keep backups in a seperate folder
#+BEGIN_SRC emacs-lisp
;;; Avoid littering the user's filesystem with backups
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '((".*" . "~/.emacs.d/saves/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups

;;; Lockfiles unfortunately cause more pain than benefit
(setq create-lockfiles nil)
#+END_SRC

*** UTF-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC
*** Use asynchronous processes where possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :init (dired-async-mode 1))
#+END_SRC
** fix bugs
*** [[https://www.reddit.com/r/emacs/comments/cueoug/the_failed_to_download_gnu_archive_is_a_pretty/][Failed to download from elpa]]
#+BEGIN_SRC emacs-lisp
(when (version< emacs-version "26.3")
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
#+END_SRC
*** brackets and braces on macOS with non-mac-keyboard
#+begin_src emacs-lisp
  (setq mac-option-key-is-meta t)
  (setq mac-right-option-modifier nil)
#+end_src
*** Use Python 3
#+begin_src emacs-lisp
  (setq python-shell-interpreter "python3")
#+end_src
*** [[https://emacs.stackexchange.com/questions/30082/your-python-shell-interpreter-doesn-t-seem-to-support-readline][‘python-shell-interpreter’ doesn’t seem to support readline]]
#+begin_src emacs-lisp
  (setq python-shell-completion-native-enable nil) 
#+end_src
*** cant find module python org mode
#+begin_src emacs-lisp
  (defun python-reinstate-current-directory ()
    "When running Python, add the current directory ('') to the head of sys.path.
  For reasons unexplained, run-python passes arguments to the
  interpreter that explicitly remove '' from sys.path. This means
  that, for example, using `python-send-buffer' in a buffer
  visiting a module's code will fail to find other modules in the
  same directory.

  Adding this function to `inferior-python-mode-hook' reinstates
  the current directory in Python's search path."
    (python-send-string "sys.path[0:0] = ['']"))

  (add-hook 'inferior-python-mode-hook 'python-reinstate-current-directory)
#+end_src
*** pdflatex not found
#+begin_src emacs-lisp
  ;;(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/pdflatex"))
  ;;(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/latex"))
  ;;(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/tex"))

  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell 
        (replace-regexp-in-string "[[:space:]\n]*$" "" 
          (shell-command-to-string "$SHELL -l -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
  (when (equal system-type 'darwin) (set-exec-path-from-shell-PATH))
#+end_src
*** TODO COMMENT [[https://github.com/purcell/exec-path-from-shell][exec path from shell]]
#+begin_src emacs-lisp
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))


  ;;(setenv "PYTHONPATH" (shell-command-to-string "$SHELL --login -c 'echo -n $PYTHONPATH'"))

  (exec-path-from-shell-copy-env "PYTHONPATH")
#+end_src
* visuals
** Initial Cosmetics
Turn off the menubar, toolbar and scrollbar. 
#+BEGIN_SRC emacs-lisp
;(if (fboundp 'menu-bar-mode)
    ;(menu-bar-mode -1))
(if (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
(when window-system (add-hook 'text-mode-hook 'hl-line-mode))
#+END_SRC
** COMMENT Pretty symbols
#+BEGIN_SRC emacs-lisp
  (when window-system
	(use-package pretty-mode
	:config
	(global-pretty-mode t)))
#+END_SRC
** Themes
*** Fallback theme
#+BEGIN_SRC emacs-lisp
(if (not custom-enabled-themes)
    (load-theme 'wheatgrass t))
#+END_SRC
*** COMMENT Set zenburn-theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t)
    (let ((line (face-attribute 'mode-line :underline)))
      (set-face-attribute 'mode-line          nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :overline   line)
      (set-face-attribute 'mode-line-inactive nil :underline  line)
      (set-face-attribute 'mode-line          nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :box        nil)
      (set-face-attribute 'mode-line-inactive nil :background "#0f0f0f")))
#+end_src
*** Atom One
#+begin_src emacs-lisp
  (use-package atom-one-dark-theme
    :config
    (load-theme 'atom-one-dark t))
#+end_src
*** COMMENT Solarized Light
#+begin_src emacs-lisp
  (use-package solarized-theme
    :config
    (load-theme 'solarized-light t))
#+end_src
** Font
#+begin_src emacs-lisp
  (set-frame-font "Fantasque Sans Mono 16" nil t)
#+end_src
** smartline
#+begin_src emacs-lisp
    (use-package smart-mode-line-atom-one-dark-theme)
    (use-package smart-mode-line
      :config
      (setq sml/theme 'atom-one-dark)
      (sml/setup))
 #+end_src
*** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M %b %d")
  (display-time-mode 1)
#+END_SRC
** darkroom
#+begin_src emacs-lisp
  (use-package olivetti
    :config
    (add-hook 'text-mode-hook 'olivetti-mode))
#+end_src
** Start with a bigger window
#+begin_src emacs-lisp
  (defun set-frame-size-according-to-resolution ()
    (interactive)
    (if window-system
    (progn
      ;; use 120 char wide window for largeish displays
      ;; and smaller 80 column windows for smaller displays
      ;; pick whatever numbers make sense for you
      (if (> (x-display-pixel-width) 1280)
             (add-to-list 'default-frame-alist (cons 'width 120))
             (add-to-list 'default-frame-alist (cons 'width 80)))
      ;; for the height, subtract a couple hundred pixels
      ;; from the screen height (for panels, menubars and
      ;; whatnot), then divide by the height of a char to
      ;; get the height we want
      (add-to-list 'default-frame-alist 
           (cons 'height (/ (- (x-display-pixel-height) 200)
                               (frame-char-height)))))))

  (set-frame-size-according-to-resolution)
#+end_src
* window management
** COMMENT Setup exwm
Using emacs as an X11 tiling window manager
  #+BEGIN_SRC emacs-lisp
(use-package exwm
  :config
    (require 'exwm-config)
    (exwm-config-default))
  #+END_SRC

** dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
      ([remap other-window] . switch-window))
#+END_SRC
** Split window and follow focus
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "s-h") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "s-v") 'split-and-follow-vertically)
#+END_SRC
** ibuffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "s-b") 'ibuffer)
#+end_src
* useful packages
** COMMENT evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :config

    (evil-mode 1)
    (use-package evil-leader
      :ensure t
      :config
      (global-evil-leader-mode t)
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key
        "s s" 'swiper
        "d x w" 'delete-trailing-whitespace
        "f f" 'find-file
        "s t b" 'switch-to-buffer
        "j" 'switch-window
        "e s" 'org-edit-src-code
        "t h" 'org-toggle-heading
        "s b" 'save-buffer
        "e e" 'exit-emacs
        "e c" 'counsel-M-x
        "c w" 'delete-window
        ))

    (use-package evil-surround
      :ensure t
      :config (global-evil-surround-mode))

    (use-package evil-indent-textobject
      :ensure t)

    (use-package evil-org
      :ensure t
      :config
      (evil-org-set-key-theme
       '(textobjects insert navigation additional shift todo heading))
      (add-hook 'org-mode-hook (lambda () (evil-org-mode)))))
#+end_src
** [[https://github.com/ema2159/centaur-tabs][centaur tabs]]
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :demand
    :config
    (centaur-tabs-mode t)
    (centaur-tabs-headline-match)
    (setq centaur-tabs-height 32)
    (centaur-tabs-change-fonts "Fantasque Sans Mono" 160)
    :bind
    ("s-q" . centaur-tabs-backward)
    ("s-e" . centaur-tabs-forward))
#+end_src
** dashboard
*** dependencies
**** page-break-lines
#+begin_src emacs-lisp
  (use-package page-break-lines)
#+end_src
*** install
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+end_src
*** configure
#+begin_src emacs-lisp
  ;; Set the title
  (setq dashboard-banner-logo-title "dogemacs")
  ;; Set the banner
  (setq dashboard-startup-banner "/Users/jeldo/.emacs.d/shino.png")
  ;; Value can be
  ;; 'official which displays the official emacs logo
  ;; 'logo which displays an alternative emacs logo
  ;; 1, 2 or 3 which displays one of the text banners
  ;; "path/to/your/image.png" which displays whatever image you would prefer

  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  ;; (setq dashboard-show-shortcuts nil)
#+end_src
** COMMENT ergoemacs-mode
#+begin_src emacs-lisp
  (use-package ergoemacs-mode
    :config
    (setq ergoemacs-theme "lvl1") ;; Uses Standard Ergoemacs keyboard theme
    (setq ergoemacs-keyboard-layout "us") ;; Assumes QWERTY keyboard layout
    (ergoemacs-mode 1))
#+end_src
** company-mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** [[https://github.com/abo-abo/swiper][ivy]]
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
	'((swiper . ivy--regex-plus)
	  (swiper-isearch . regexp-quote)
	  (counsel-rg . ivy--regex-plus)
	  (t      . ivy--regex-fuzzy)))

  (global-set-key (kbd "C-x b") 'ivy-switch-buffer))

(use-package swiper
  :config
  (global-set-key (kbd "C-s") 'swiper-isearch))

(use-package counsel
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "M-y") 'counsel-yank-pop))
#+END_SRC
*** COMMENT [[https://github.com/tumashu/ivy-posframe][ivy-posframe]]
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :config
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
    ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
    (setq ivy-posframe-parameters
          '((left-fringe . 8)
            (right-fringe . 8)))
    (ivy-posframe-mode 1))
#+end_src
** COMMENT ledger-mode
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :config
  (autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
  (add-to-list 'load-path
	       (expand-file-name "/path/to/ledger/source/lisp/"))
  (add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode)))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+END_SRC
** COMMENT magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** neotree
#+begin_src emacs-lisp
  (use-package neotree
    :config
    (global-set-key (kbd "s-#") 'neotree-toggle))
  (setq neo-theme (if (display-graphic-p) 'ascii 'ascii))
#+end_src
** COMMENT hydra
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+end_src
** COMMENT pdf-tools
 #+BEGIN_SRC emacs-lisp
 (use-package pdf-tools
   :init
   (load "pdf-tools-init.el"))
 #+END_SRC
** [[https://github.com/jorgenschaefer/elpy][elpy]]
#+begin_src emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+end_src
** COMMENT [[https://github.com/necaris/conda.el][conda.el]]
#+begin_src emacs-lisp
  (require 'conda)
  ;; if you want interactive shell support, include:
  (conda-env-initialize-interactive-shells)
  ;; if you want eshell support, include:
  (conda-env-initialize-eshell)
  ;; if you want auto-activation (see below for details), include:
  (conda-env-autoactivate-mode t)
#+end_src
* org
** Install Org
and require =org-tempo= to keep =SRC= block expanding with =TAB=
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (require 'org-tempo))
#+END_SRC

** Quickly insert a block of emacs-lisp
relies on =org-tempo= as of =Org v9.2=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+END_SRC
** Quickly visit the config file
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/readme.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** Reload the config
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/readme.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** Use org-indent
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

** Set org-ellipsis style
#+begin_src emacs-lisp
  (setq org-ellipsis " +")
#+end_src

** Latex snippet previews
*** Toggle preview under cursor
#+begin_src emacs-lisp
  (use-package org-fragtog
    :config
    (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src
*** Make the preview bigger
#+begin_src emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
#+end_src

** Always use pretty entities
#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c h") 'org-toggle-heading)
#+end_src

** COMMENT org-flashcards
#+begin_src emacs-lisp
  (use-package org-fc
    :load-path "~/src/org-fc"
    :custom
    (org-fc-directories '("~/org"))
    :config
    (require 'org-fc-hydra)
    (global-set-key (kbd "C-c f") 'org-fc-hydra/body))
#+end_src
** Org Babel Python
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+end_src
** COMMENT [[https://so.nwalsh.com/2020/01/05-latex][Prettier LaTeX export]]

First, because I’m using UTF-8, switch the processor and configure the process command:

#+begin_src emacs-lisp
  (setq org-latex-compiler "xelatex")
  (setq org-latex-pdf-process
        (list (concat "latexmk -"
                      org-latex-compiler 
                      " -recorder -synctex=1 -bibtex-cond %b")))
#+end_src

Then, configure Org to use lstlisting for source environments:

#+begin_src emacs-lisp
  (setq org-latex-listings t)
#+end_src

Next, update org-latex-default-packages-alist to remove inputenc and fontenc because fontspec in my premable takes care of those things:

#+begin_src emacs-lisp
  (setq org-latex-default-packages-alist
        '(("" "graphicx" t)
          ("" "grffile" t)
          ("" "longtable" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "amssymb" t)
          ("" "capt-of" nil)
          ("" "hyperref" nil)))
#+end_src

The documentation for org-latex-default-packages-alist suggests that it shouldn't be changed because it's used for more than one backend. How it's used for non-LaTeX backends, I don't know. I may need to revisit this approach if I encounter problems elsewhere; so far, I haven’t.

Finally, update org-latex-classes to include the big wodge of preamble that I want:

#+begin_src emacs-lisp
  (setq org-latex-classes
  '(("article"
  "\\RequirePackage{fix-cm}
  \\PassOptionsToPackage{svgnames}{xcolor}
  \\documentclass[11pt]{article}
  \\usepackage{fontspec}
  \\setmainfont{ETBembo RomanOSF}
  \\setsansfont[Scale=MatchLowercase]{Raleway}
  \\setmonofont[Scale=MatchLowercase]{Operator Mono SSm}
  \\usepackage{sectsty}
  \\allsectionsfont{\\sffamily}
  \\usepackage{enumitem}
  \\setlist[description]{style=unboxed,font=\\sffamily\\bfseries}
  \\usepackage{listings}
  \\lstset{frame=single,aboveskip=1em,
          framesep=.5em,backgroundcolor=\\color{AliceBlue},
          rulecolor=\\color{LightSteelBlue},framerule=1pt}
  \\usepackage{xcolor}
  \\newcommand\\basicdefault[1]{\\scriptsize\\color{Black}\\ttfamily#1}
  \\lstset{basicstyle=\\basicdefault{\\spaceskip1em}}
  \\lstset{literate=
              {§}{{\\S}}1
              {©}{{\\raisebox{.125ex}{\\copyright}\\enspace}}1
              {«}{{\\guillemotleft}}1
              {»}{{\\guillemotright}}1
              {Á}{{\\'A}}1
              {Ä}{{\\\"A}}1
              {É}{{\\'E}}1
              {Í}{{\\'I}}1
              {Ó}{{\\'O}}1
              {Ö}{{\\\"O}}1
              {Ú}{{\\'U}}1
              {Ü}{{\\\"U}}1
              {ß}{{\\ss}}2
              {à}{{\\`a}}1
              {á}{{\\'a}}1
              {ä}{{\\\"a}}1
              {é}{{\\'e}}1
              {í}{{\\'i}}1
              {ó}{{\\'o}}1
              {ö}{{\\\"o}}1
              {ú}{{\\'u}}1
              {ü}{{\\\"u}}1
              {¹}{{\\textsuperscript1}}1
              {²}{{\\textsuperscript2}}1
              {³}{{\\textsuperscript3}}1
              {ı}{{\\i}}1
              {—}{{---}}1
              {’}{{'}}1
              {…}{{\\dots}}1
              {⮠}{{$\\hookleftarrow$}}1
              {␣}{{\\textvisiblespace}}1,
              keywordstyle=\\color{DarkGreen}\\bfseries,
              identifierstyle=\\color{DarkRed},
              commentstyle=\\color{Gray}\\upshape,
              stringstyle=\\color{DarkBlue}\\upshape,
              emphstyle=\\color{Chocolate}\\upshape,
              showstringspaces=false,
              columns=fullflexible,
              keepspaces=true}
  \\usepackage[a4paper,margin=1in,left=1.5in]{geometry}
  \\usepackage{parskip}
  \\makeatletter
  \\renewcommand{\\maketitle}{%
    \\begingroup\\parindent0pt
    \\sffamily
    \\Huge{\\bfseries\\@title}\\par\\bigskip
    \\LARGE{\\bfseries\\@author}\\par\\medskip
    \\normalsize\\@date\\par\\bigskip
    \\endgroup\\@afterindentfalse\\@afterheading}
  \\makeatother
  [DEFAULT-PACKAGES]
  \\hypersetup{linkcolor=Blue,urlcolor=DarkBlue,
    citecolor=DarkRed,colorlinks=true}
  \\AtBeginDocument{\\renewcommand{\\UrlFont}{\\ttfamily}}
  [PACKAGES]
  [EXTRA]"
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))

  ("report" "\\documentclass[11pt]{report}"
  ("\\part{%s}" . "\\part*{%s}")
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))

  ("book" "\\documentclass[11pt]{book}"
  ("\\part{%s}" . "\\part*{%s}")
  ("\\chapter{%s}" . "\\chapter*{%s}")
  ("\\section{%s}" . "\\section*{%s}")
  ("\\subsection{%s}" . "\\subsection*{%s}")
  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src
** [[https://github.com/gpoore/minted][Use minted for code blocks LaTeX export]]

[[https://emacs.stackexchange.com/questions/33010/how-to-word-wrap-within-code-blocks][See also here ...]] [[https://emacs.stackexchange.com/questions/27982/export-code-blocks-in-org-mode-with-minted-environment][and here ...]]

#+begin_src emacs-lisp
  (setq org-latex-compiler "xelatex")
  (setq org-latex-pdf-process
        (list (concat "latexmk -"
                      org-latex-compiler 
                      " -recorder -synctex=1 -bibtex-cond %b")))

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (setq org-latex-minted-options '(("breaklines" "true")
                                   ("breakanywhere" "true")))
#+end_src
** [[https://github.com/dakrone/ox-tufte][ox-tufte]]
#+begin_src emacs-lisp
  (package-install 'ox-tufte)
  (require 'ox-tufte)
#+end_src
** [[https://discourse.devontechnologies.com/t/clickable-dt-links-in-orgmode/11250][Clickable DT Links in Org Mode]]
#+begin_src emacs-lisp
  ;; DevonThink Links
  (org-add-link-type "x-devonthink-item" 'org-devonthink-item-open)
  (defun org-devonthink-item-open (uid)
  "Open the given uid, which is a reference to an item in Devonthink"
  (shell-command (concat "open \"x-devonthink-item:" uid "\"")))
#+end_src
* terminal
** Default shell
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
** Launch terminal
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
  (global-set-key (kbd "<s-S-return>") 'eshell)
#+END_SRC
